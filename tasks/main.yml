---
- fail: msg="Please ensure '{{ item }}' is set"
  when:
    - not {{ item }} is defined or {{ item }} == ""
  with_items:
    - deploy_dir
  tags: ['always']

- name: Install pm2 package
  npm:
    name: "{{ item }}"
    global: yes
    state: present
  become: true
  tags: ['init', 'install']
  with_items:
    - pm2
    - pm2-logrotate
    - pmx

- name: Upgrade pm2 package
  npm:
    name: "{{ item }}"
    global: yes
    state: present
  become: true
  tags: ['init', 'install', 'configure', 'upgrade']
  with_items:
    - pm2
    - pm2-logrotate
    - pmx

- name: Ensure pm2 is not running
  command: pm2 kill
  become: false
  tags: ['init', 'install']

- name: Remove stuff from .pm2 directory
  file: path=/home/{{ ansible_user }}/.pm2/{{ item }} state=absent
  become: false
  with_items:
    - dump.pm2
    - pm2.log
    - pm2.pid
    - touch
  tags: ['install']

- name: Install pm2-logrotate
  shell:  pm2 install pm2-logrotate
  become: false
  args:
    chdir: "{{ deploy_dir }}"
  tags: ['install']

- name: Start PM2 using ecosystem.yml
  shell: pm2 start ecosystem.yml
  become: false
  args:
    chdir: "{{ deploy_dir }}"
  tags: ['install', 'configure', 'upgrade']

- name: Set PM2 to start on reboot
  shell: pm2 startup {{ startup_type }} -u {{ ansible_user }} --hp /home/{{ ansible_user }}
  become: true
  tags: ['install']

- name: Save PM2
#  shell: pm2 save -u {{ ansible_user }} --hp /home/{{ ansible_user }}
  shell: pm2 save
  become: false
  tags: ['install']


#sudo su -c ""
# sudo update-rc.d -f pm2-init.sh remove
# sudo rm /etc/init.d/pm2-init.sh
# sudo pkill -f PM2
# ps aux | grep pm2

# PM2_HOME=/home/{{ ansible_user }}/.pm2

